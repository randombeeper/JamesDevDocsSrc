"use strict";(self.webpackChunkjamesdevdocs=self.webpackChunkjamesdevdocs||[]).push([[3836],{9257:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"uistyle","metadata":{"permalink":"/JamesDevDocsSrc/blog/uistyle","source":"@site/blog/2024-03-21-uistyling/2024-03-21-uistyle.md","title":"Changing the UI styling","description":"At this point everything is working as expected, as far as I can tell. Just to recap at a VERY high level:","date":"2024-03-21T13:00:00.000Z","formattedDate":"March 21, 2024","tags":[{"label":"DocSearch","permalink":"/JamesDevDocsSrc/blog/tags/doc-search"}],"readingTime":0.53,"hasTruncateMarker":true,"authors":[{"name":"James Gray","title":"Sr Program Manager, Algolia DocSearch","url":"https://github.com/randombeeper","imageURL":"https://github.com/randombeeper.png","key":"jgray"}],"frontMatter":{"slug":"uistyle","title":"Changing the UI styling","authors":["jgray"],"tags":["DocSearch"],"image":"https://i.imgur.com/mErPwqL.png","date":"2024-03-21T13:00"},"unlisted":false,"nextItem":{"title":"Why are there duplicate results?","permalink":"/JamesDevDocsSrc/blog/finetuning"}},"content":"At this point everything is working as expected, as far as I can tell. Just to recap at a VERY high level:\\n\\n* Deployed a Docusaurus site\\n* Applied for DocSearch\\n* Updated DocSearch config\\n* Excluded some URLs\\n\\nGreat, looking back, actually its not all that difficult, but there is a little learning curve to anything new. Now I want to better understand how to influence the styling of the UI on the page while I\'m performing a search. To give myself something to aim at, I\'m going to update each of my blogs with an image that represents the \\n\\n\x3c!--truncate--\x3e\\n\\nThat\'s all for today..."},{"id":"finetuning","metadata":{"permalink":"/JamesDevDocsSrc/blog/finetuning","source":"@site/blog/2024-03-21-finetuning/2024-03-21-finetuning.md","title":"Why are there duplicate results?","description":"Picking up from the last post, I\'m now wondering why I\'m getting multiple results in the UI when I search for phrases I know only exist on one page in the blog.","date":"2024-03-21T11:00:00.000Z","formattedDate":"March 21, 2024","tags":[{"label":"DocSearch","permalink":"/JamesDevDocsSrc/blog/tags/doc-search"}],"readingTime":1.375,"hasTruncateMarker":true,"authors":[{"name":"James Gray","title":"Sr Program Manager, Algolia DocSearch","url":"https://github.com/randombeeper","imageURL":"https://github.com/randombeeper.png","key":"jgray"}],"frontMatter":{"slug":"finetuning","title":"Why are there duplicate results?","authors":["jgray"],"tags":["DocSearch"],"date":"2024-03-21T11:00"},"unlisted":false,"prevItem":{"title":"Changing the UI styling","permalink":"/JamesDevDocsSrc/blog/uistyle"},"nextItem":{"title":"Where are my results?","permalink":"/JamesDevDocsSrc/blog/noresults"}},"content":"Picking up from the last post, I\'m now wondering why I\'m getting multiple results in the UI when I search for phrases I know only exist on one page in the blog.\\n\\n![Duplicate Results](./dups.png)\\n\\n\x3c!--truncate--\x3e\\n\\nIt turns out that is because there are actually four (4) different pages with that content:\\n\\n* The blog page itself\\n* The blog landing page\\n* The tag page for Algolia\\n* The tag page for Docusaurus\\n\\nWhen you run Build for Docusaurus, each of those pages are generated and thus, result in different search results. While technically correct I do not like this search experience. Instead, I want to see only one result, the actual blog page. Therefore, I\'m thinking one of two things should happen:\\n\\n1. Remove the \\"extra\\" results from being returned\\n1. Remove the \\"extra\\" records from being populated in my index to begin with\\n\\nSince I can\'t see a reason to want those records in my index to begin with, I\'d rather just have the entries for the blog pages themselves in the index. Therefore, I think what this will require is an update to the Crawler configuration file.\\n\\n# Crawler Config\\n\\nI see right away there are two properties to look at:\\n\\n* discoveryPatterns\\n* pathsToMatch\\n\\nAfter looking at those for a bit, what I really wanted was a way to exclude URLs. After a search on the Crawler docs, guess what, there is (https://www.algolia.com/doc/tools/crawler/apis/configuration/exclusion-patterns/#examples), so I added these to my crawler:\\n\\n```js\\n  exclusionPatterns: [\\n    \\"https://randombeeper.github.io/JamesDevDocsSrc/blog/tags/**\\",\\n    \\"https://randombeeper.github.io/JamesDevDocsSrc/blog/\\",\\n  ],\\n```\\n\\nNow my search results do not contain \\"duplicate\\" pages, only results that will go right to the blog post where the match is found."},{"id":"noresults","metadata":{"permalink":"/JamesDevDocsSrc/blog/noresults","source":"@site/blog/2024-03-21-noresults.md","title":"Where are my results?","description":"Picking up from yesterday (apply for DocSearch), I was accepted into the program. I received an email with suggested CSS/JS that I can put on my site. At first I started to do that but then as I was looking around the Docusaurus docs I found that there was an out-of-the-box integration already available for Algolia (https://docusaurus.io/docs/search#using-algolia-docsearch). So instead of trying to figure out how to put the CSS/JS code directly into the right areas of my docs, I just updated the docusaurus.config.js file as show below.","date":"2024-03-21T10:00:00.000Z","formattedDate":"March 21, 2024","tags":[{"label":"DocSearch","permalink":"/JamesDevDocsSrc/blog/tags/doc-search"}],"readingTime":1.895,"hasTruncateMarker":true,"authors":[{"name":"James Gray","title":"Sr Program Manager, Algolia DocSearch","url":"https://github.com/randombeeper","imageURL":"https://github.com/randombeeper.png","key":"jgray"}],"frontMatter":{"slug":"noresults","title":"Where are my results?","authors":["jgray"],"tags":["DocSearch"],"date":"2024-03-21T10:00","sidebar_position":3},"unlisted":false,"prevItem":{"title":"Why are there duplicate results?","permalink":"/JamesDevDocsSrc/blog/finetuning"},"nextItem":{"title":"GitHub and DocSearch","permalink":"/JamesDevDocsSrc/blog/github-docsearch"}},"content":"Picking up from yesterday (apply for DocSearch), I was accepted into the program. I received an email with suggested CSS/JS that I can put on my site. At first I started to do that but then as I was looking around the Docusaurus docs I found that there was an out-of-the-box integration already available for Algolia (https://docusaurus.io/docs/search#using-algolia-docsearch). So instead of trying to figure out how to put the CSS/JS code directly into the right areas of my docs, I just updated the docusaurus.config.js file as show below.\\n\\n\x3c!--truncate--\x3e\\n\\n```js title=\\"\\"\\nexport default {\\n  // ...\\n  themeConfig: {\\n    // ...\\n    algolia: {\\n      // The application ID provided by Algolia\\n      appId: \'YOUR_APP_ID\',\\n      // Public API key: it is safe to commit it\\n      apiKey: \'YOUR_SEARCH_API_KEY\',\\n      indexName: \'YOUR_INDEX_NAME\',\\n    },\\n  },\\n};\\n```\\n\\nThis worked and put a UI in my docs!\\n\\n# No Results\\n\\nHowever, I wasn\'t getting any resutls when using the UI. The first thing I did then was go into the dashboard and try the search there. The search worked and I saw there were over 100 records in my index but something in the records didn\'t look right to me. After some poking around, I saw that I needed to update the Crawler config to match the Docusaurus v3 configuration found at https://docsearch.algolia.com/docs/templates/#docusaurus-v2-template. Restarting the crawler, waiting, looking at the records in the dashboard, they looked better! Searching in the dashboard, the results looked better now too. But, I still had no results when using the UI in my docs. Hmmm...\\n\\n# No Results in the UI\\n\\nI was thinking that chances were good the credentials that I used above in the config file had a typo but that wasn\'t it. Then I opened up the Chrome devtools network tab and watched as I typed, responses were giving 200\'s, so on the surface without digging too much deeper there that was ok. I happened to then look at Discord and did a search for Docusaurus and one of the first hits was someone observing the same exact problem I have and the solution was to set contextualSearch=false in the config file. I did that and I started getting results in my UI.\\n\\nI want to make another but separate blog post for today so ending this one for now."},{"id":"github-docsearch","metadata":{"permalink":"/JamesDevDocsSrc/blog/github-docsearch","source":"@site/blog/2024-03-20-github-docsearch.md","title":"GitHub and DocSearch","description":"Initially I goofed around with getting the Docusaurus site into GH using two different repos, one for the site source and one for the build directory. After goofing with that for a little bit, I stumbled upon the command to deploy to a different branch within your repo:","date":"2024-03-20T00:00:00.000Z","formattedDate":"March 20, 2024","tags":[{"label":"Docusaurus","permalink":"/JamesDevDocsSrc/blog/tags/docusaurus"},{"label":"GitHub","permalink":"/JamesDevDocsSrc/blog/tags/git-hub"},{"label":"GitHub Pages","permalink":"/JamesDevDocsSrc/blog/tags/git-hub-pages"},{"label":"DocSearch","permalink":"/JamesDevDocsSrc/blog/tags/doc-search"}],"readingTime":1.11,"hasTruncateMarker":true,"authors":[{"name":"James Gray","title":"Sr Program Manager, Algolia DocSearch","url":"https://github.com/randombeeper","imageURL":"https://github.com/randombeeper.png","key":"jgray"}],"frontMatter":{"slug":"github-docsearch","title":"GitHub and DocSearch","authors":["jgray"],"tags":["Docusaurus","GitHub","GitHub Pages","DocSearch"],"sidebar_position":2},"unlisted":false,"prevItem":{"title":"Where are my results?","permalink":"/JamesDevDocsSrc/blog/noresults"},"nextItem":{"title":"Welcome","permalink":"/JamesDevDocsSrc/blog/welcome"}},"content":"Initially I goofed around with getting the Docusaurus site into GH using two different repos, one for the site source and one for the build directory. After goofing with that for a little bit, I stumbled upon the command to deploy to a different branch within your repo:\\n\\n```bash\\nnpm run deploy\\n```\\n\\nThis automatically publishes your build to the branch <code>gh-pages</code> which GH Pages is also easily tuned into. This was the way to go.\\n\\n\x3c!--truncate--\x3e\\n\\nGitHub Deployed! Look for the tutorial soon.\\n\\n# GitHub Pages\\nAfter commiting my site into GH as well as publishing the static contents to the 2nd branch, it was time to setup GH Pages. This is easily configured within your GH repo under settings->pages. Use \\"Deploy from a branch\\" and set the Branch to \\"gh-pages\\". Within a few minutes the site will be live and you\'ll see a button on the page to visit it.\\n\\nGitHub Pages Deployed! Look for the tutorial soon.\\n\\n# DocSearch\\nNow that I\'ve got an actual doc site on the internet, it\'s time to set up a search mechanism using Algolia DocSearch. Visit https://docsearch.algolia.com/apply/, put in the URL of the doc site, your email, your GH repo from previous step, and submit the form. Provided you meet all the criteria you\'ll be accepted into the program.\\n\\n\\nThat\'s all for today..."},{"id":"welcome","metadata":{"permalink":"/JamesDevDocsSrc/blog/welcome","source":"@site/blog/2024-03-19-welcome/index.md","title":"Welcome","description":"I recently joined Algolia as Senior Program Manager for DocSearch (and other programs too). I\'m a firm believer that hands on experience is the ultimate way to increase knowhow and as program manager for DocSearch, that\'s the first thing I wanted to do. So, this blog will detail the process I went through as a complete newcomer to DocSearch. As an added bonus, this site is also going to serve as the actual input for the DocSearch I create! As I go, I will be able to create more content, which will require me to learn more about DocSearch, which will require me to write more about it. Win win!","date":"2024-03-19T00:00:00.000Z","formattedDate":"March 19, 2024","tags":[{"label":"Algolia","permalink":"/JamesDevDocsSrc/blog/tags/algolia"},{"label":"Docusaurus","permalink":"/JamesDevDocsSrc/blog/tags/docusaurus"}],"readingTime":2.41,"hasTruncateMarker":true,"authors":[{"name":"James Gray","title":"Sr Program Manager, Algolia DocSearch","url":"https://github.com/randombeeper","imageURL":"https://github.com/randombeeper.png","key":"jgray"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":"jgray","tags":["Algolia","Docusaurus"],"sidebar_position":1},"unlisted":false,"prevItem":{"title":"GitHub and DocSearch","permalink":"/JamesDevDocsSrc/blog/github-docsearch"}},"content":"I recently joined Algolia as Senior Program Manager for DocSearch (and other programs too). I\'m a firm believer that hands on experience is the ultimate way to increase knowhow and as program manager for DocSearch, that\'s the first thing I wanted to do. So, this blog will detail the process I went through as a complete newcomer to DocSearch. As an added bonus, this site is also going to serve as the actual input for the DocSearch I create! As I go, I will be able to create more content, which will require me to learn more about DocSearch, which will require me to write more about it. Win win!\\n\\nShort bio - went to school for computer engineering, focused on JAVA for my first few professional years, switched jobs, maintained an internal website based on PHP for the QA team of a C++ application. Lots of C++, Python, PHP/C#, more JAVA, and years later, I started doing more management than coding. Following that while part of a technical sales team, I coded more at the desktop UI level with MFC/WPF/.NET to show developers how to implement C++ libraries for the desktop. After that came a long string of more managerial/director roles that, while I had to manage technical people, kept me from doing technical things for most the time. So while I have a pretty deep technical knowledge pool to pull from, I\'ve been out of the game for awhile. All the latest web tech stack stuff is pretty new to me in terms of hands-on. \\n\\nCome with me to implement DocSearch on a new doc site.\\n\\n![Publish a doc site that uses DocSearch](./devdocsite.jpeg)\\n\\n\x3c!--truncate--\x3e\\n\\n# The rough overall approach\\n\\nBefore I went too far, I thought it would be good to make an outline of what I was trying to acheive:\\n\\n* Create a developer doc site\\n* Create a DocSearch application with index\\n* Implement a frontend UI for searching the index\\n* Make updates to the doc site\\n* Update the index\\n* See the changes reflected in the UI\\n* Improve the process overall as I learn more\\n    * Refine index and utilize more Algolia features as I go\\n    * Refine the search UI experience\\n\\n# Deploy a doc site with Docusaurus\\n\\nMy first inclination was to create a website based on Hugo. The reason for Hugo was that I knew it had a big supportive community and figured that could be a good place to start. Keep in mind that while I have a technical background I didn\'t want to spend too much time over engineering an entire custom doc site and deployment mechanism. I\'m looking to get up and running as fast as possile. Knowing that, I did switch gears to Docusaurus as I had heard within Algolia that we had out-of-the-box integration.\\n\\nDocusaurus deployed! Checkout the tutorial on that soon.\\n\\nThat\'s all for today..."}]}')}}]);