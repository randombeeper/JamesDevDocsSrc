"use strict";(self.webpackChunkjamesdevdocs=self.webpackChunkjamesdevdocs||[]).push([[7990],{7350:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var n=a(4848),i=a(8453);const o={slug:"uistyle",title:"Changing the UI styling",authors:["jgray"],tags:["DocSearch"],"og:image":"./uistylingfire.jpeg",date:"2024-03-21T13:00"},s="UI Styling",r={permalink:"/JamesDevDocsSrc/blog/uistyle",source:"@site/blog/2024-03-21-uistyling/2024-03-21-uistyle.md",title:"Changing the UI styling",description:"At this point everything is working as expected, as far as I can tell. Just to recap at a VERY high level:",date:"2024-03-21T13:00:00.000Z",formattedDate:"March 21, 2024",tags:[{label:"DocSearch",permalink:"/JamesDevDocsSrc/blog/tags/doc-search"}],readingTime:2.44,hasTruncateMarker:!0,authors:[{name:"James Gray",title:"Sr Program Manager, Algolia DocSearch",url:"https://github.com/randombeeper",imageURL:"https://github.com/randombeeper.png",key:"jgray"}],frontMatter:{slug:"uistyle",title:"Changing the UI styling",authors:["jgray"],tags:["DocSearch"],"og:image":"./uistylingfire.jpeg",date:"2024-03-21T13:00"},unlisted:!1,nextItem:{title:"Why are there duplicate results?",permalink:"/JamesDevDocsSrc/blog/finetuning"}},h={authorsImageUrls:[void 0]},l=[{value:"Before",id:"before",level:2},{value:"After",id:"after",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"At this point everything is working as expected, as far as I can tell. Just to recap at a VERY high level:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Deployed a Docusaurus site"}),"\n",(0,n.jsx)(t.li,{children:"Applied for DocSearch"}),"\n",(0,n.jsx)(t.li,{children:"Updated DocSearch config"}),"\n",(0,n.jsx)(t.li,{children:"Excluded some URLs"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Great, looking back, actually its not all that difficult, but there is a little learning curve to anything new. Now I want to better understand how to influence the styling of the UI on the page while I'm performing a search. To give myself something to aim at, I'm going to update each of my blogs with an image that represents the blog post and have the results pull up that image."}),"\n",(0,n.jsx)(t.h1,{id:"blog-image",children:"Blog Image"}),"\n",(0,n.jsxs)(t.p,{children:["I'm not quite sure how to do this and I'm writing this as I go. My first thought was to put an image at the top of each blog, probably in a container that I can then reference with the crawler config/selector. While looking at the Docusaurus docs, I saw that Blogs have a property in the frontmatter called ",(0,n.jsx)("code",{children:"image"}),' and the definition appears to be "Cover or thumbnail image that will be used when displaying the link to your post.". This seems more desireable at the moment. My thinking is that I can attach an image to the blog without requiring it to be ',(0,n.jsx)("i",{children:"in"})," the blog. But now that I'm typing this out, maybe that doesn't make sense becuase then the person will reach the page and not see the image. Still, I want to expirement with it some, so that's what I'm going to start with."]}),"\n",(0,n.jsxs)(t.p,{children:["As such, I've downloaded an image for each blog post so far, specified the property with the proper image name, and redeployed the changes. While I see the images in the page source, those images don't seem to appear when I do something like paste a link to the blog in slack. In addition, I then made them the ",(0,n.jsxs)("code",{children:["og",":image"]})," thinking that would do it but I'm still not seeing it work. In fact, now that I've specified them as ",(0,n.jsxs)("code",{children:["og",":image"]})," I'm seeing that Docusaurus isn't copying the images over into the asset folder as expected. Well, for now, I'm going to put this image thing on ice. What I want to do next is just influence the styling of the UI window a little."]}),"\n",(0,n.jsx)(t.h1,{id:"ui-styling-part-two",children:"UI Styling Part Two"}),"\n",(0,n.jsxs)(t.p,{children:["The Docusaurus docs on the Algolia search integration contains some information on styling that can be used OOTB (",(0,n.jsx)(t.a,{href:"https://docusaurus.io/docs/search#connecting-algolia",children:"https://docusaurus.io/docs/search#connecting-algolia"}),"), so I'm going to try that first. Now that I look at it closer, I see what has been done is just providing you the values that you can more easily override, if you want to. Just to do some testing, I changed the background color to something very obvious, to be sure the change made an impact."]}),"\n",(0,n.jsx)(t.h2,{id:"before",children:"Before"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"alt text",src:a(9249).A+"",width:"559",height:"452"})}),"\n",(0,n.jsx)(t.h2,{id:"after",children:"After"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"alt text",src:a(9252).A+"",width:"560",height:"305"})}),"\n",(0,n.jsx)(t.p,{children:"This change was reverted. :/"}),"\n",(0,n.jsx)(t.p,{children:"That's all for today..."})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},9252:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/afterchange-a6071c767f929f9f02c3c372a5c9093e.png"},9249:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/beforechange-e9e11cf033b441a802400d1a8cf43b91.png"},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>r});var n=a(6540);const i={},o=n.createContext(i);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);